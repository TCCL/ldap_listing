<?php

/**
 * ldap_listing.module
 *
 * ldap_listing
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\ldap_listing\DirectoryQuery;
use Drupal\ldap_listing\Form\SettingsForm;

/**
 * Implements hook_help().
 */
function ldap_listing_help($route_name,RouteMatchInterface $route_match) {
  switch ($route_name) {
  case 'help.page.ldap_listing':
    return '
      <h2>LDAP Directory</h2>
      <p>This module generates a directory listing page for entities queried from an LDAP server.</p>
      ';
  }
}

/**
 * Implements hook_theme().
 */
function ldap_listing_theme($existing,$type,$theme,$path) {
  return [
    'ldap_listing_directory_listing' => [
      'variables' => [
        'index' => null,
      ],
    ],
    'ldap_listing_directory_listing_field' => [
      'variables' => [
        'section' => null,
      ],
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function ldap_listing_cron() {
  DirectoryQuery::invalidateIfElapsed();
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ldap_listing_entity_extra_field_info() {
  $extra = [];

  $config = \Drupal::config(SettingsForm::CONFIG_OBJECT);
  if ($config->get('link_to_user_page')) {
    $fields = [];

    $attrs = $config->get('user_page_attributes');
    $w = 100;
    foreach ($attrs as $attr) {
      $name = $attr['attribute_name'];
      $fields[$name] = [
        'label' => $attr['attribute_label'],
        'description' => "Custom LDAP user field: {$attr['attribute_label']}",
        'weight' => $w++,
        'visible' => true,
      ];
    }

    $extra['user']['user']['display'] = $fields;
  }

  return $extra;
}

function ldap_listing_user_view(array &$build,
                                EntityInterface $entity,
                                EntityViewDisplayInterface $display,
                                $viewMode)
{
  $build['#cache']['tags'][] = DirectoryQuery::CACHE_TAG;
  $config = \Drupal::config(SettingsForm::CONFIG_OBJECT);

  if ($config->get('link_to_user_page')) {
    try {
      $userQuery = \Drupal::service('ldap_listing.user');
      $extraFields = $userQuery->query($entity);

      foreach ($extraFields as $name => $fieldData) {
        if (empty($fieldData['value'])) {
          unset($build[$name]);
          continue;
        }

        // Use the field template to render the pseudofield. This is a little
        // hacky, but it seems to work. NOTE: I'm not sure if the #items
        // property needs to be set.

        $build[$name] = [
          '#theme' => 'field',
          '#title' => $fieldData['label'],
          '#label_display' => 'above',
          '#field_name' => $name,
          '#field_type' => 'textfield',
          '#entity_type' => 'user',
          '#view_mode' => '_custom',
          '#bundle' => $entity->bundle(),
          '#object' => $entity,
          '#is_multiple' => false,
          //'#items' => [],
          '#attributes' => [
            'class' => [
              'ldap-listing-attribute',
              "ldap-listing-attribute-$name",
            ],
          ],

          // Use the 'plain_text' filter text format to render field content.
          0 => [
            '#type' => 'processed_text',
            '#text' => $fieldData['value'],
            '#format' => 'plain_text',
          ],
        ];
      }

    } catch (\Drupal\ldap_listing\Exception $ex) {
      error_log($ex->getMessage());
    }
  }
}

/**
 * Local Variables:
 * mode:php
 * End:
 */
