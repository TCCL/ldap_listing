<?php

/**
 * DirectoryPdf.php
 *
 * ldap_listing
 */

namespace Drupal\ldap_listing\Document;

use DateTime;
use TCPDF;

class DirectoryPdf extends TCPDF implements DirectoryPdfInterface, DirectoryPdfHeaderInterface {
  use TCPDFUtilsTrait;

  const PORTRAIT = 'P';
  const LANDSCAPE = 'L';

  /**
   * The current Drupal user.
   *
   * @var \Drupal\Core\Session\AccountProxyInterface
   */
  private $directoryPdfCurrentUser;

  /**
   * The timestamp denoting when the instance was created.
   *
   * @var DateTime
   */
  private $directoryPdfTs;

  /**
   * File system path of image file to load for header region.
   *
   * @var string
   */
  private $directoryPdfHeaderImagePath;

  /**
   * The provided title text to use in the header.
   *
   * @var string
   */
  private $directoryPdfHeaderTitle = 'Employee Directory';

  /**
   * Creates a new DirectoryPdf instance.
   *
   * @param string $orient
   *  Denotes the orientation of the document. Default is portrait.
   */
  public function __construct(string $orient = 'P') {
    parent::__construct($orient,'in','USLETTER',true,'UTF-8');

    $this->directoryPdfCurrentUser = \Drupal::currentUser();
    $this->directoryPdfTs = new DateTime;
  }

  /**
   * Implements DirectoryPdfInterface::getFileName().
   */
  public function getFileName() : string {
    $default = 'Directory';

    if (empty($this->directoryPdfHeaderTitle)) {
      $title = $default;
    }
    else {
      $title = $this->directoryPdfHeaderTitle;
      $title = preg_replace('/\s+/','-',$title);
      $title = preg_replace('/[^\-a-zA-Z0-9._]/','',$title);
      $title = preg_replace('/[^a-zA-Z0-9]+$/','',$title);

      if (empty($title)) {
        $title = $default;
      }
    }

    $ts = $this->directoryPdfTs->format('Ymd');
    $name = "$title-$ts.pdf";

    return $name;
  }

  /**
   * Implements DirectoryPdfInterface::generate().
   */
  public function generate() : void {
    if ($this->directoryPdfCurrentUser) {
      $this->directoryPdfCurrentUser->getDisplayName();
      $this->SetAuthor("Generated by $name");
    }
    $this->SetTitle($this->directoryPdfHeaderTitle);
    $this->SetSubject('LDAP Listing Employee Directory Document');
    $this->SetKeywords('directory','employee','staff','LDAP');
    $this->SetMargins(0.5,1.5,0.5,true);

  }

  /**
   * Implements DirectoryPdfInterface::outputDocument().
   */
  public function outputDocument(string $file = '') : void {
    if (!empty($file)) {
      $this->Output($file,'F');
    }
    else {
      $this->Output($this->getFileName());
    }
  }

  /**
   * Implements DirectoryPdfHeaderInterface::setHeaderImage().
   */
  public function setHeaderImage(string $file) : void {
    $this->directoryPdfHeaderImagePath = $file;
  }

  /**
   * Implements DirectoryPdfHeaderInterface::setHeaderTitle().
   */
  public function setHeaderTitle(string $title) : void {
    $this->directoryPdfHeaderTitle = $title;
  }

  /**
   * Overrides TCPDF::Header().
   */
  public function Header() {
    $w = $this->getPageWidth();
    $x = 0.5;

    // Draw header image if provided.
    if ($this->directoryPdfHeaderImagePath) {
      $this->Image($this->directoryPdfHeaderImagePath,0.5,0.5,2.5);
      $x += 3.0;
    }

    // Draw header title.
    $this->pushFont('b',22.0);
    $this->SetXY($x,0.85);
    $this->drawText($this->directoryPdfHeaderTitle,'L',0);

    // Draw generated message and pagination.

    $this->popFont();
    $this->pushFont('b',10.0);
    $this->SetXY(-3.5,0.5);
    $dt = $this->directoryPdfTs->format('F jS, Y');
    $generatedMessage = "Generated on $dt";
    $this->drawTextHavingWidth($generatedMessage,3.0,'R',0);
    $this->Ln();

    $this->popFont();
    $this->pushFont('',9.0);
    $currentPage = $this->getAliasNumPage();
    $totalPages = $this->getAliasNbPages();
    $pagination = "Page $currentPage of $totalPages";
    // NOTE: When formatting page numbers, TCPDF uses placeholder strings that
    // interfere with string width calculation. To work around this, we use a
    // fixed string, assuming the total page count will never exceed single
    // digits.
    $width = min(3.0,$this->GetStringWidth("Page 1 of 1"));
    $this->SetX(-0.5 - $width);
    $this->drawTextHavingWidth($pagination,$width,'L',0);

    $this->popFont();

    // Draw separator line.

    $this->SetLineStyle(['width' => 0.02, 'color' => [0xdf]]);
    $this->Line(0.5,1.375,$w - 0.5,1.375);
  }

  /**
   * Overrides TCPDF::Footer().
   */
  public function Footer() {

  }
}
